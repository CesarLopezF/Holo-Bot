const superagent = require('superagent');
const parseString = require('xml2js').parseString;

function testArray(result) {
    var valid = true;
    try {
        if (typeof (result) == 'undefined') valid = false;
        if (typeof (result.posts) == 'undefined') valid = false;
        if (typeof (result.posts.post) == 'undefined') valid = false;
        if (typeof (result.posts.post[0]) == 'undefined') valid = false;
        if (typeof (result.posts.post[0].$) == 'undefined') valid = false;
        if (typeof (result.posts.post[0].$.file_url) == 'undefined') valid = false;
        if (typeof (result.posts.post[0].$.id) == 'undefined') valid = false;
    } catch(ex) {
        valid = false;
    }
    
    return valid;
}

/**
 * The main BooruGrabber Class
 */
class BooruGrabber {
    /**
     * 
     * @param {String} type "sfw" or "nsfw"
     */
    constructor(type) {
        if (type == "sfw") {
            this.safe = true;
            this.url = `https://safebooru.org/index.php`;
        } else if (type == "nsfw") {
            this.safe = false;
            this.url = `http://gelbooru.com/index.php`;
        } else throw new Error("You must specify either 'sfw' or 'nsfw' as a parameter")
    }

    
/**
 * Gets an array of items.
 * @param {string} tags tags separated by +
 * @param {*} count number of items to get
 */
    randomImages(tags, count) {
        return new Promise((resolve, reject) => {
            this._getImages(count, 0, tags).then(data => {
                let clean = data.text.replace("\ufeff", "");
                parseString(clean, (err, result) => {
                    if (err) reject(err);
                    let randomPid = Math.floor(Math.random() * result.posts.$.count);
                    var retval = [];
                    for (var i in result.posts.post) {
                        var it = result.posts.post[i].$;

                        var image_url = it.file_url;
                        if ( ! (image_url.includes("https:") || image_url.includes("http:") ) ) {
                            image_url = "https:" + result.posts.post[i].$.file_url;
                        }

                        var a = {
                            image_url: image_url,
                            source_url: it.source,
                            md5: it.md5,
                            tags: it.tags
                        }
                        retval.push(a);
                    }
                    resolve(retval);
                })
            })

        })
    }

    /**
     * Gets one random image from the tag specified
     * @param {string} tags Tags separated by "+"
     */
    randomImage(tags) {
        return new Promise((resolve, reject) => {
            this._getImages(1, 0, tags).then(data => {
                let clean = data.text.replace("\ufeff", "");
                parseString(clean, (err, result) => {
                    if (err) reject(err);
                    let randomPid;
                    if(result.posts.$.count >= 20000){
                        randomPid = Math.floor(Math.random() * 20000);
                    } else {
                        randomPid = Math.floor(Math.random() * result.posts.$.count);
                    }
                    this._getImages(1, randomPid, tags).then(data => {
                        let clean = data.text.replace("\ufeff", "");
                        parseString(clean, (err, result) => {
                            if (err) reject(err);
                            if (testArray(result)) {
                                var image_url = result.posts.post[0].$.file_url;
                                var tags = result.posts.post[0].$.tags;
                                var source = result.posts.post[0].$.source;
                                if ( ! (image_url.includes("https:") || image_url.includes("http:") ) ) {
                                    image_url = "https:" + result.posts.post[0].$.file_url;
                                }
                                resolve({
                                    image_url: image_url,
                                    tags: tags,
                                    source: source,
                                    source_url: `https://safebooru.org/index.php?page=post&s=view&id=${result.posts.post[0].$.id}`
                                });
                            } else {
                                reject({
                                    error: "Missing ID or File URL"
                                })
                            }
                        })
                    })
                })
            })

        })
    }

    /**
     * Gets a number of random images.
     * @param {number} limit max number of posts to get
     * @param {number} pid ID of the post to grab
     * @param {string} tags Tags separated by "+"
     */
    _getImages(limit, pid, tags) {
        return new Promise((resolve, reject) => {
            superagent.post(`${this.url}?page=dapi&s=post&q=index&limit=${limit}&pid=${pid}&tags=${tags}`)
                .end((err, res) => {
                    if (err) reject(err);
                    resolve(res);
                });
        });

    }

}

module.exports = {
    BooruGrabber
}